name: Release
on:
  # Triggered on new GitHub Release
  release:
    types: [published]
  # Triggered on every successful Build action
  workflow_run:
    workflows: ["Build"]
    branches: [main,master]
    types:
      - completed
  # Manual trigger for rollback to specific release or redeploy latest
  workflow_dispatch:
    inputs:
      version:
        default: latest
        description: Tag you want to release.
        required: true

jobs:
  push_to_registry:
    runs-on: ubuntu-20.04
    if: ${{ github.event.workflow_run.conclusion != 'failure' }}
    steps:
      # Checkout latest or specific tag
      - name: checkout
        if: ${{ github.event.inputs.version == '' || github.event.inputs.version == 'latest' }}
        uses: actions/checkout@v2
      - name: checkout tag
        if: ${{ github.event.inputs.version != '' && github.event.inputs.version != 'latest' }}
        uses: actions/checkout@v2
        with:
          ref: refs/tags/${{ github.event.inputs.version }}

      - name: Replace Prod API and CDN URLs
        env:
          deploy_api: ${{ secrets.DEPLOY_API }}
          deploy_cdn: ${{ secrets.DEPLOY_CDN }}
        run: |
          if [ -e ./.deploy/ci.prebuild.sh ]
          then
            chmod +x ./.deploy/ci.prebuild.sh
            ./.deploy/ci.prebuild.sh
          else
            echo "Skipping CI prebuild"
          fi

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: 16

      # Build UI which is copied to local server wwwroot directory to match content
      - name: Install and build npm
        run: |
          npm install
          npm run build
          [[ -f ./post.build.js ]] && node ./post.build.js
        working-directory: ./ui

      # Assign environment variables used in subsequent steps
      - name: repository name fix
        run: echo "image_repository_name=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      # TAG_NAME defaults to 'latest' if not a release or manual deployment
      - name: Assign version
        run: |
          echo "TAG_NAME=latest" >> $GITHUB_ENV
          if [ "${{ github.event.release.tag_name }}" != "" ]; then
            echo "TAG_NAME=${{ github.event.release.tag_name }}" >> $GITHUB_ENV
          fi;
          if [ "${{ github.event.inputs.version }}" != "" ]; then
            echo "TAG_NAME=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          fi;

      # Authenticate, build and push to GitHub Container Registry (ghcr.io)
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      # Build and push new docker image, skip for manual redeploy other than 'latest'
      - name: Build and push Docker images
        uses: docker/build-push-action@v2.2.2
        if: ${{ github.event.inputs.version == '' || github.event.inputs.version == 'latest' }}
        with:
          file: Dockerfile
          context: .
          push: true
          tags: ghcr.io/${{ env.image_repository_name }}:${{ env.TAG_NAME }}

      # Deploy UI to GitHub Pages
      - name: Deploy to GitHub Pages
        if: ${{ env.deploy_cdn != '' }}
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./api/MyApp/wwwroot
          user_name: 'GitHub Action'
          user_email: 'action@github.com'

  deploy_via_ssh:
    needs: push_to_registry
    runs-on: ubuntu-20.04
    if: ${{ github.event.workflow_run.conclusion != 'failure' }}
    steps:
      # Checkout latest or specific tag
      - name: checkout
        if: ${{ github.event.inputs.version == '' || github.event.inputs.version == 'latest' }}
        uses: actions/checkout@v2
      - name: checkout tag
        if: ${{ github.event.inputs.version != '' && github.event.inputs.version != 'latest' }}
        uses: actions/checkout@v2
        with:
          ref: refs/tags/${{ github.event.inputs.version }}

      # Assign environment variables used in subsequent steps
      - name: repository name fix and env
        run: |
          echo "image_repository_name=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "TAG_NAME=latest" >> $GITHUB_ENV
          if [ "${{ github.event.release.tag_name }}" != "" ]; then
            echo "TAG_NAME=${{ github.event.release.tag_name }}" >> $GITHUB_ENV
          fi;
          if [ "${{ github.event.inputs.version }}" != "" ]; then
            echo "TAG_NAME=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          fi;

      # Populate docker-compose.yml with variables from build process, including TAG_NAME.
      - name: docker-compose file prep
        uses: danielr1996/envsubst-action@1.1.0
        env:
          RELEASE_VERSION: ${{ env.TAG_NAME }}
          IMAGE_REPO: ${{ env.image_repository_name }}
          APP_NAME: ${{ github.event.repository.name }}
          HOST_DOMAIN: ${{ secrets.DEPLOY_API }}
          LETSENCRYPT_EMAIL: ${{ secrets.LETSENCRYPT_EMAIL }}
          DEPLOY_API: ${{ secrets.DEPLOY_API }}
          DEPLOY_CDN: ${{ secrets.DEPLOY_CDN }}
        with:
          input: .deploy/docker-compose-template.yml
          output: .deploy/${{ github.event.repository.name }}-docker-compose.yml

      # Copy only the docker-compose.yml to remote server home folder
      - name: copy compose file via scp
        uses: appleboy/scp-action@v0.1.1
        with:
          host: ${{ secrets.DEPLOY_API }}
          username: ${{ secrets.DEPLOY_USERNAME }}
          port: 22
          key: ${{ secrets.DEPLOY_KEY }}
          source: ".deploy/${{ github.event.repository.name }}-docker-compose.yml"
          target: "~/"

      # Deploy Docker image with ServiceStack application using `docker compose up` remotely
      - name: remote docker-compose up via ssh
        uses: appleboy/ssh-action@v0.1.4
        env:
          APPTOKEN: ${{ secrets.CR_PAT }}
          USERNAME: ${{ secrets.DEPLOY_USERNAME }}
        with:
          host: ${{ secrets.DEPLOY_API }}
          username: ${{ secrets.DEPLOY_USERNAME }}
          key: ${{ secrets.DEPLOY_KEY }}
          port: 22
          envs: APPTOKEN,USERNAME
          script: |
            echo $APPTOKEN | docker login ghcr.io -u $USERNAME --password-stdin
            docker-compose -f ~/.deploy/${{ github.event.repository.name }}-docker-compose.yml pull
            docker-compose -f ~/.deploy/${{ github.event.repository.name }}-docker-compose.yml up -d
