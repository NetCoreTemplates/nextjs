{"pageProps":{"post":{"title":"Develop using Visual Studio","date":"2021-11-10T05:35:07.322Z","slug":"vs","author":{"name":"Author","picture":"/assets/blog/authors/author3.svg"},"content":"<p>A popular alternative development environment to our preferred <a href=\"/posts/rider\">JetBrains Rider</a> IDE is to use\nVisual Studio, the primary issue with this is that VS Code is a better IDE with richer support for npm\nprojects whilst Visual Studio is a better IDE for C# Projects.</p>\n<p>Essentially this is why we recommend Rider where it's best at both, where both C# and npm TypeScript projects can\nbe developed from within the same solution.</p>\n<h3>Developing with just VS Code</h3>\n<a href=\"https://visualstudio.microsoft.com/\" title=\"VS Code\" class=\"sm:float-left mr-8\">\n<img src=\"https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/svg/vs-code.svg\" \n     class=\"w-24 h-24\" style=\"margin-top:1rem\"></a>\n<p>If you prefer the dev UX of a lightweight text editor or your C# project isn't large, than VS Code on its own\ncan provide a great development UX that\n<a href=\"https://code.visualstudio.com/docs/nodejs/reactjs-tutorial\">supports React out-of-the-box</a>.</p>\n<p>VSCode's <a href=\"https://code.visualstudio.com/docs/editor/integrated-terminal\">Integrated Terminal</a> has great multi-terminal\nsupport you can toggle between the editor and terminal with <code>Ctrl+</code> or open a new Terminal Window with\n<code>Ctrl+Shift+`</code> to run the <code>/ui</code> dev server with:</p>\n<pre><code class=\"language-bash\">$ npm run dev\n</code></pre>\n<p>Then in a new Terminal Window, start a new watched C# .NET Server build with:</p>\n<pre><code class=\"language-bash\">$ dotnet watch\n</code></pre>\n<p>With both projects started you can open and leave a browser tab running at <code>http://localhost:3000</code> where it\nwill automatically reload itself at every <code>Ctrl+S</code> save point.</p>\n<p>When you're ready to preview a development build of the Client UI in your .NET App, run:</p>\n<pre><code class=\"language-bash\">$ npm run build:local\n</code></pre>\n<p>Which will publish your Next.js's App static assets to the .NET App's <code>/wwwroot</code> where it can be previewed from\n<code>https://localhost:5001</code>.</p>\n<h3>Using Visual Studio</h3>\n<a href=\"https://code.visualstudio.com/\" title=\"Visual Studio\" class=\"sm:float-left mr-8\">\n<img src=\"https://raw.githubusercontent.com/ServiceStack/docs/master/docs/images/svg/vs-2019.svg\"\n     class=\"w-24 h-24\" style=\"margin-top:.5rem; margin-bottom:1rem\"></a>\n<p>As your C# project grows you'll want to consider running the back-end C# Solution with Visual Studio .NET with its\nmuch improved intelli-sense, navigation, tests runner &#x26; debug capabilities.</p>\n<p>As we've never had a satisfactory experience trying develop npm SPA projects with VS.NET, we'd recommend only\nrunning the C# <code>/api</code> project in VS.NET and continuing to use VSCode for <code>/ui</code> project.</p>\n<h3>Deploying to Production</h3>\n<p>When you're ready to deploy your App you can create a production build with:</p>\n<pre><code class=\"language-bash\">$ npm run publish\n</code></pre>\n<p>Which will generate production builds of your C# projects and npm projects with its static generated UI assets\nwritten to <code>/wwwroot</code> to be deployed together with your complete .NET App.</p>\n<p>Our recommendation for the best possible responsive UX is to deploy your App's <code>/wwwwroot</code> static assets to a CDN in\norder for the initial load of your App to be downloaded from nearby CDN edge caches.</p>\n<p>To do this configure the production url the UI should use for all its <code>/api</code> Ajax requests by modifying\n<code>DEPLOY_API</code> in your <code>next.config.ts</code>:</p>\n<pre><code class=\"language-csharp\">const DEPLOY_API = 'https://$DEPLOY_API'\n</code></pre>\n<p>This template also includes the necessary GitHub Actions to deploy this Apps production static assets to GitHub Pages CDN,\nfor more info, checkout <a href=\"/posts/deploy\">GitHub Actions Deployments</a>.</p>\n<h3>Get Started</h3>\n<p>Driven by the static typing benefits of TypeScript, React bundles full\n<a href=\"https://reactjs.org/docs/static-type-checking.html#type-definitions\">Type Definitions with their libraries</a>\nthat development IDEs like Rider take full advantage of that's used to power its type-safe &#x26; productive intelli-sense dev UX.</p>\n<p>If you're new to React a good place to start is\n<a href=\"https://reactjs.org/docs/getting-started.html\">React Getting Started</a>.</p>","ogImage":{"url":"/assets/blog/hello-world/cover.jpg"},"coverImage":"/assets/blog/hello-world/cover.jpg"}},"__N_SSG":true}